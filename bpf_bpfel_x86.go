// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfCluster struct {
	ClusterName [64]uint8
	Offsets     [32]uint64
}

type bpfDbCtx struct {
	Gtid              uint64
	CostTime          uint64
	ThdAddr           int64
	Timestamp         uint64
	Comm              [16]uint8
	ClusterName       [64]uint8
	User              [32]uint8
	PrivUser          [32]uint8
	Host              [64]uint8
	Ipaddr            [46]uint8
	Database          [46]uint8
	ThreadId          uint32
	QueryId           int64
	QueryLen          uint64
	Query             [1024]uint8
	PreviousFoundRows uint64
	CurrentFoundRows  uint64
	AffectedRows      uint64
	SentRowCount      uint64
	RowCountFunc      uint64
	SqlErrno          uint32
	Killed            int32
	PeerPort          uint16
	Processed         int8
	_                 [5]byte
}

type bpfEvent struct{ Gtid uint64 }

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *bpfObjects
//     *bpfPrograms
//     *bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	Mysql57Query       *ebpf.ProgramSpec `ebpf:"mysql57_query"`
	Mysql57QueryReturn *ebpf.ProgramSpec `ebpf:"mysql57_query_return"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	Clusters        *ebpf.MapSpec `ebpf:"clusters"`
	DbCtxQueue      *ebpf.MapSpec `ebpf:"db_ctx_queue"`
	Events          *ebpf.MapSpec `ebpf:"events"`
	ThreadDbCtxHash *ebpf.MapSpec `ebpf:"thread_db_ctx_hash"`
	VarHolder       *ebpf.MapSpec `ebpf:"var_holder"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	Clusters        *ebpf.Map `ebpf:"clusters"`
	DbCtxQueue      *ebpf.Map `ebpf:"db_ctx_queue"`
	Events          *ebpf.Map `ebpf:"events"`
	ThreadDbCtxHash *ebpf.Map `ebpf:"thread_db_ctx_hash"`
	VarHolder       *ebpf.Map `ebpf:"var_holder"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.Clusters,
		m.DbCtxQueue,
		m.Events,
		m.ThreadDbCtxHash,
		m.VarHolder,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	Mysql57Query       *ebpf.Program `ebpf:"mysql57_query"`
	Mysql57QueryReturn *ebpf.Program `ebpf:"mysql57_query_return"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.Mysql57Query,
		p.Mysql57QueryReturn,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
